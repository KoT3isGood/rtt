#version 460 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;




// Input

// Buffers
// Triangle SSBo Buffer
layout(std430,binding = 0) buffer triangleBuffer {
    mat4x4 triangles[];
    // x0,  y0,  z0,  materialID
    // x1,  y1,  z1,  uv01
    // x2,  y2,  z2,  uv00
    // uv10,uv11,uv20,uv21
};

layout(std430, binding = 3) buffer lightbuffer {
    vec4 lightPosition[];
};

// Bounding Box Buffer
// Used for optimization
layout(std430,binding = 2) buffer boundingBoxes {
    mat2x4 boundingBox[];
    // x,y,z, start
    // -x,-y,-z, end
};

// Uniforms
uniform vec3 cameraPos;
uniform vec3 cameraRotation;
uniform int amountOfTriangles;
uniform int amountOfLights;
uniform int amountOfBoundingBoxes;
uniform vec2 resolution;
uniform bool isOrto;






// Output
layout(rgba32f, binding = 0) uniform image2D imgOutput;






mat3x3 getCameraRotationMatrix() {
    float cx = cos(cameraRotation.x);
	float sx = sin(cameraRotation.x);
	float cy = cos(cameraRotation.y);
	float sy = sin(cameraRotation.y);
	float cz = cos(cameraRotation.z);
	float sz = sin(cameraRotation.z);
    return mat3x3(
		cx, 0, sx,
		0, 1, 0,
		-sx, 0, cx
	) * mat3x3(
		1, 0, 0,
		0, cy, -sy,
		0, sy, cy
	) * mat3x3(
		cz, -sz, 0,
		sz, cz, 0,
		0, 0, 1
	);

}









// Ray Tracing

struct Ray {
    vec3 origin;
    vec3 direction;
};



// Ray-trinagle intersection
// Source: https://iquilezles.org/articles/intersectors/
vec3 triIntersect( in Ray ray, in vec3 v0, in vec3 v1, in vec3 v2 )
{
    vec3 v1v0 = v1 - v0;
    vec3 v2v0 = v2 - v0;
    vec3  n = cross( v1v0, v2v0 );
    float dd = dot(ray.direction,n);
    if (dd>0.0) {
        return vec3(-1);
    }
    vec3 rov0 = ray.origin - v0;
    vec3  q = cross( rov0, ray.direction );
    float d = 1.0/dd;
    float u = d*dot( -q, v2v0 );
    float v = d*dot(  q, v1v0 );
    float t = d*dot( -n, rov0 );
    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;
    return vec3( t, u, v );
}
// Ray-sphere intersection
// Source: https://iquilezles.org/articles/intersectors/
vec2 sphIntersect( in Ray ray, in vec3 ce, float ra )
{
    
    vec3 oc = ray.origin - ce;
    float b = dot( oc, ray.direction );
    float c = dot( oc, oc ) - ra*ra;
    float h = b*b - c;
    if( h<0.0 ) return vec2(-1.0); // no intersection
    h = sqrt( h );
    return vec2( -b-h, -b+h );
}

// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
bool RayBoundingBox(Ray ray, vec3 boxMin, vec3 boxMax){
	vec3 invDir = 1 / ray.direction;
	vec3 tMin = (boxMin - ray.origin) * invDir;
	vec3 tMax = (boxMax - ray.origin) * invDir;
	vec3 t1 = min(tMin, tMax);
	vec3 t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);
	return tNear <= tFar;
};


bool traceRayT(in Ray ray, out float dist, out vec2 uv, out int triangle) {
    int nearestTriangle = -1;
    float hitDist = 2^32-1;
    vec2 hitUv = vec2(0,0);
    for (int mesh = 0; mesh < amountOfBoundingBoxes;mesh++) {
        if (RayBoundingBox(ray,boundingBox[mesh][0].xyz,boundingBox[mesh][1].xyz)) {
            for (int i = int(boundingBox[mesh][0].w); i<int(boundingBox[mesh][1].w);i++) {
                vec3 thisHit = triIntersect(ray,triangles[i][0].xyz,triangles[i][1].xyz,triangles[i][2].xyz);
                if (thisHit.x>0.0 && thisHit.x<hitDist) {
                    hitDist = thisHit.x;
                    nearestTriangle = i;
                };
            }
        }
    }
    if (nearestTriangle!=-1) {
            dist = hitDist;
            uv = hitUv;
            triangle = nearestTriangle;
            return true;
    }
    return false;
}
vec2 calculateUV(vec2 uv,int triangle) {
    vec2 uvU = mix(vec2(triangles[triangle][1].w,triangles[triangle][2].w),vec2(triangles[triangle][3].xy),uv.x);
    vec2 uvV = mix(vec2(triangles[triangle][1].w,triangles[triangle][2].w),vec2(triangles[triangle][3].zw),uv.x);
    return uvU+uvV;
}
vec3 calcuateNormal(int triangle) {
    vec3 v1v0 = triangles[triangle][1].xyz - triangles[triangle][0].xyz;
    vec3 v2v0 = triangles[triangle][2].xyz - triangles[triangle][0].xyz;
    return normalize(cross( v1v0, v2v0 ));
};


bool traceRayS(in Ray ray, out vec2 hitInfo, out int sphere) {
    int nearestSphere = -1;
    vec2 hit = vec2(1000000,0.0);
    for (int i = 0; i<amountOfLights;i++) {
        vec2 thisHit = sphIntersect(ray,lightPosition[i].xyz,lightPosition[i].w);
        if (thisHit.x>0.0 && thisHit.x<hit.x) {
            hit = thisHit;
            nearestSphere = i;
        };
    }
    if (hit.x>0.0&&hit.x!=100000) {
        hitInfo = hit;
        sphere = nearestSphere;
        return true;
    }
    return false;
};























void main() {
    // Set up texCoord
    // Since compute shaders do not provide them in clear way
    vec2 texCoord = vec2(0.0, 0.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	
    texCoord.x = float(texelCoord.x-0.5)/(gl_NumWorkGroups.x*gl_WorkGroupSize.x);
    texCoord.y = float(texelCoord.y-0.5)/(gl_NumWorkGroups.y*gl_WorkGroupSize.y);

    // Ray Tracing Part

    vec2 uv = (texCoord-0.5)*resolution/resolution.y;
    
    Ray albedoRay;


    if (!isOrto) {
        albedoRay.origin = cameraPos;
        albedoRay.direction = normalize(vec3(1,uv))*getCameraRotationMatrix();
    } else {
        //albedoRay.direction = vec3(1,0,0)*getCameraRotationMatrix();
        //albedoRay.origin = cameraPos+vec3(0,uv)*getCameraRotationMatrix();
    }
    


    vec2 triangleUV;
    float dist;
    int triangle;

    bool hit = false;
    hit = traceRayT(albedoRay,dist,triangleUV,triangle);
    

    vec3 color = vec3(0.0);
    if (hit) {
        color = vec3(dist/25);
    };

    imageStore(imgOutput, texelCoord, vec4(color,1.0));
}