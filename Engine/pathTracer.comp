#version 460 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;




// Input

// Buffers
// Triangle SSBo Buffer
layout(std430,binding = 0) buffer triangleBuffer {
    mat4x4 triangles[];
    // x0,  y0,  z0,  materialID
    // x1,  y1,  z1,  uv01
    // x2,  y2,  z2,  uv00
    // uv10,uv11,uv20,uv21
};

layout(std430, binding = 3) buffer lightbuffer {
    mat2x4 lightPosition[];
};

// Bounding Box Buffer
// Used for optimization
layout(std430,binding = 2) buffer boundingBoxes {
    mat2x4 boundingBox[];
    // x,y,z, start
    // -x,-y,-z, end
};

// Uniforms
uniform vec3 cameraPos;
uniform vec3 cameraRotationM1;
uniform vec3 cameraRotationM2;
uniform vec3 cameraRotationM3;
uniform int amountOfTriangles;
uniform int amountOfLights;
uniform int amountOfBoundingBoxes;
uniform vec2 resolution;
uniform bool isOrto;
uniform float orthoSize;






// Output
layout(rgba32f, binding = 0) uniform image2D imgOutput;








float random(inout int state) {
    state = state * 747796405 + 2891336453;
    int result = ((state >> ((state>>28)+4))^state) * 277803737;

    result = (result >> 22) ^ result;
    return result / 4294967295.0;
}




float RandomValueNormalDistribution(inout int state) {
    float t = 2 * 3.1415926*random(state);
    float r = sqrt(-2 * log(random(state)));
    return r*cos(t);
}

vec3 RandomDirection(inout int state) {
    float x = RandomValueNormalDistribution(state);
    float y = RandomValueNormalDistribution(state);
    float z = RandomValueNormalDistribution(state);
    return normalize(vec3(x,y,z));
}


// Ray Tracing

struct Ray {
    vec3 origin;
    vec3 direction;
};



// Ray-trinagle intersection
// Source: https://iquilezles.org/articles/intersectors/
vec3 triIntersect( in Ray ray, in vec3 v0, in vec3 v1, in vec3 v2 )
{
    vec3 v1v0 = v1 - v0;
    vec3 v2v0 = v2 - v0;
    vec3  n = cross( v1v0, v2v0 );
    float dd = dot(ray.direction,n);
    if (dd<0.0) {
        return vec3(-1);
    }
    vec3 rov0 = ray.origin - v0;
    vec3  q = cross( rov0, ray.direction );
    float d = 1.0/dd;
    float u = d*dot( -q, v2v0 );
    float v = d*dot(  q, v1v0 );
    float t = d*dot( -n, rov0 );
    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;
    return vec3( t, u, v );
}
// Ray-sphere intersection
// Source: https://iquilezles.org/articles/intersectors/
vec2 sphIntersect( in Ray ray, in vec3 ce, float ra )
{
    
    vec3 oc = ray.origin - ce;
    float b = dot( oc, ray.direction );
    float c = dot( oc, oc ) - ra*ra;
    float h = b*b - c;
    if( h<0.0 ) return vec2(-1.0); // no intersection
    h = sqrt( h );
    return vec2( -b-h, -b+h );
}

// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
bool RayBoundingBox(Ray ray, vec3 boxMin, vec3 boxMax){
	vec3 invDir = 1 / ray.direction;
	vec3 tMin = (boxMin - ray.origin) * invDir;
	vec3 tMax = (boxMax - ray.origin) * invDir;
	vec3 t1 = min(tMin, tMax);
	vec3 t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);
	return tNear <= tFar;
};


bool traceRayT(in Ray ray, out float dist, out vec2 uv, out int triangle) {
    int nearestTriangle = -1;
    float hitDist = 10000000;
    vec2 hitUv = vec2(0,0);
    for (int mesh = 0; mesh < amountOfBoundingBoxes;mesh++) {
        if (RayBoundingBox(ray,boundingBox[mesh][0].xyz,boundingBox[mesh][1].xyz)) {
            for (int i = int(boundingBox[mesh][0].w); i<int(boundingBox[mesh][1].w);i++) {
                vec3 thisHit = triIntersect(ray,triangles[i][0].xyz,triangles[i][1].xyz,triangles[i][2].xyz);
                if (thisHit.x>0.0 && thisHit.x<hitDist) {
                    hitDist = thisHit.x-0.000001;
                    nearestTriangle = i;
                    hitUv = thisHit.yz;
                };
            }
        }
    }
    if (nearestTriangle!=-1) {
            dist = hitDist;
            uv = hitUv;
            triangle = nearestTriangle;
            return true;
    }
    return false;
}
vec2 calculateUV(vec2 uv,int triangle) {
    vec2 uvU = mix(vec2(triangles[triangle][1].w,triangles[triangle][2].w),vec2(triangles[triangle][3].xy),uv.x);
    vec2 uvV = mix(vec2(triangles[triangle][1].w,triangles[triangle][2].w),vec2(triangles[triangle][3].zw),uv.y);
    return uvV+uvU;//+uvV;
}
vec3 calcuateNormal(int triangle) {
    vec3 v1v0 = triangles[triangle][1].xyz - triangles[triangle][0].xyz;
    vec3 v2v0 = triangles[triangle][2].xyz - triangles[triangle][0].xyz;
    return normalize(cross( v1v0, v2v0 ));
};


bool traceRayS(in Ray ray, out vec2 hitInfo, out int sphere) {
    int nearestSphere = -1;
    vec2 hit = vec2(10000000,0.0);
    for (int i = 0; i<amountOfLights;i++) {
        vec2 thisHit = sphIntersect(ray,lightPosition[i][0].xyz,lightPosition[i][0].w);
        if (thisHit.x>0.0 && thisHit.x<hit.x) {
            hit = thisHit-vec2(0.000001,-0.000001);
            nearestSphere = i;
        };
    }
    if (nearestSphere!=-1) {
        hitInfo = hit;
        sphere = nearestSphere;
        return true;
    }
    return false;
};



bool CalculateDidHitLightObject(in Ray ray, out int light, out float distanced) {
    float depth = 0.0;

    bool didHit = false;

    vec2 triangleUV;
    float dist = 10000000;
    int triangle;
    bool hitTriangle = false;
    hitTriangle = traceRayT(ray,dist,triangleUV,triangle);

    vec2 sphereInfo = vec2(10000000.0,0.0);
    int sphere;
    bool hitCircle = false;
    hitCircle = traceRayS(ray,sphereInfo,sphere);


    vec3 color = vec3(0.0);
    if (hitCircle || hitTriangle) {
        depth = 10000000;
    }
   
    if (hitTriangle) {
        if (depth>dist) {
            depth = dist;
        }
    }
    if (hitCircle) {
        if (depth>sphereInfo.x) {
            depth = sphereInfo.x;
            didHit = true;
            light = sphere;
            distanced = depth;
        }
    }
  
    return didHit;
}


vec3 sampleSphere(in float u, in float v, in vec3 center, in float radius, out vec3 normal, out vec3 dpdu, out vec3 dpdv, out float pdf_area) {
    pdf_area = 1.0 / (4.0 * 3.1415926 * radius * radius);
    float theta = acos(1.0 - 2.0 * u);
    float phi = 2.0 * 3.1415926 * v;
    float sinPhi = sin(phi);
    float cosPhi = cos(phi);
    float sinTheta = sin(theta);
    vec3 r = radius * vec3(cosPhi*sinTheta, cos(theta), sinPhi*sinTheta);
    normal = normalize(r);
    dpdu = normalize(vec3(-r.z, 0, r.x));
    dpdv = normalize(vec3(cosPhi * r.y, -radius * sinTheta, sinPhi * r.y));
    return center + r;
}











mat3x3 getRotationMatrix(vec3 deg) {
    float cx = cos(deg.x);
	float sx = sin(deg.x);
	float cy = cos(deg.y);
	float sy = sin(deg.y);
	float cz = cos(deg.z);
	float sz = sin(deg.z);
    return mat3x3(
		cz, -sz, 0,
		sz, cz, 0,
		0, 0, 1
	) * mat3x3(
		1, 0, 0,
		0, cy, -sy,
		0, sy, cy
	) * mat3x3(
		cx, 0, sx,
		0, 1, 0,
		-sx, 0, cx
	);

}






void main() {
    // Set up texCoord
    // Since compute shaders do not provide them in clear way
    vec2 texCoord = vec2(0.0, 0.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	
    texCoord.x = float(texelCoord.x-0.5)/(gl_NumWorkGroups.x*gl_WorkGroupSize.x);
    texCoord.y = float(texelCoord.y-0.5)/(gl_NumWorkGroups.y*gl_WorkGroupSize.y);

    // Ray Tracing Part

    vec2 uv = (texCoord-0.5)*resolution/resolution.y;
    
    Ray albedoRay;


    if (!isOrto) {
        albedoRay.origin = cameraPos;
        albedoRay.direction = normalize(vec3(-1,uv)*-getRotationMatrix(-cameraRotationM1)*-getRotationMatrix(-cameraRotationM2));
    } else {
        albedoRay.direction = vec3(-1,0,0)*-getRotationMatrix(-cameraRotationM1)*-getRotationMatrix(-cameraRotationM2);
        albedoRay.origin = cameraPos+vec3(0,uv*orthoSize)*-getRotationMatrix(-cameraRotationM1)*-getRotationMatrix(-cameraRotationM2);
    }
    
    vec2 triangleUV = vec2(0.0);
    float dist = 10000000;
   int triangle;
    bool hitTriangle = false;
    hitTriangle = traceRayT(albedoRay,dist,triangleUV,triangle);


    vec2 numPixels = vec2(resolution);
    vec2 pixelCoord = vec2(texCoord) * numPixels;
    int pixelIndex = int(pixelCoord.y * numPixels.x + pixelCoord.x);
    int rngState = pixelIndex;

    vec3 hitpos = albedoRay.origin+albedoRay.direction*dist;




    vec3 color = vec3(0.0);
    // if (hitTriangle) {
    //     color = vec3(calculateUV(triangleUV,triangle),0.0);
    // }
    if (hitTriangle) {
        vec3 normalsp;
        vec3 dpdu;
        vec3 dpdv;
        float pdf_area;
        vec3 sampledPos = sampleSphere(random(rngState),random(rngState),lightPosition[0][0].xyz,lightPosition[0][0].w, normalsp, dpdu, dpdv, pdf_area);


        Ray directRay;
        directRay.origin = hitpos;
        directRay.direction = normalize(sampledPos-directRay.origin);
        int sphere = 0;
        float distDirect = 1.0;
        float normal = -dot(calcuateNormal(triangle),directRay.direction);

        if (normal>0.0) {
            bool didhit = CalculateDidHitLightObject(directRay,sphere,distDirect);
            if (didhit) {
                color = lightPosition[sphere][1].xyz*lightPosition[sphere][1].w*normal/(distDirect*distDirect);
            }
        }
        
       
    }
    


    //color = vec3(depth)/25;
   
    imageStore(imgOutput, texelCoord, vec4(color,1.0));
}